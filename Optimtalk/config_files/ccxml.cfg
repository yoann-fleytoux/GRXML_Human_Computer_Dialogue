# OptimTalk CCXML interpreter configuration file
#
# Each configuration parameter is on a separate line and has form
# name value
#
# Comment/uncomment the parameters as needed by adding/deleting
# ';' at the beginning of respective line

###############################################################################
# CCXML interpreter related settings
###############################################################################
# Name of ccxml document to be used for an alerting connection.
;ccxml.conn_alerting_session http://example.com/example.ccxml

# Name of ccxml document to be used for starting interpretation.
;ccxml.start_session http://example.com/example.ccxml

# CCXML event I/O Processors names
# Items numbered from 1, numbering must be continuous.
ccxml.io_processors  com.optimtalk.ccxml_basichttp_processor com.optimtalk.ccxml_session_creation_processor
ccxml.io_processor1  com.optimtalk.ccxml_basichttp_processor 
ccxml.io_processor2  com.optimtalk.ccxml_session_creation_processor

# Log all events processed by <eventprocessor> (Professional Edition required).
ccxml.log_all_events

# Do not log missed events.
;ccxml.do_not_log_missed_events

# Do not log events to platform.
;ccxml.do_not_log_events_to_platform

# Terminate session manager if there are no sessions (Professional Edition
# required).
;ccxml.session_manager.exit_if_no_sessions

# If this item is enabled it is allowed to start a dialog that is not joined
# to a connection or a conference.
# Warning: enabling this item breaks CCXML standard compliance.
;ccxml.allow_starting_unjoined_dialog

# Allow tags <_simulate*> (Professional Edition required).
ccxml.telhw_simulation_tags

# When creating calls without specified callID optimtalk identifies itself
# with this string
ccxml.outbound_call_id        OptimTalk

###############################################################################
# Telephony hardware components related settings
###############################################################################
# Simulates telephony operations so that all operations succeed.
ccxml.telhw                com.optimtalk.tel_hw_simulator

# Simulates telephony operations for gui.
;ccxml.telhw                com.optimtalk.tel_hw_gui_simulator

# Uses Microsoft TAPI protocol.
;ccxml.telhw                com.optimtalk.tel_hw_tapi

# Support PBXs from 2N.
;ccxml.telhw                com.optimtalk.tel_hw_xapi


;ccxml.telhw                com.optimtalk.tel_hw_sipx

# Uses Dialogic Global Call API.
;ccxml.telhw                com.optimtalk.tel_hw_gcapi

# Uses Sofia SIP library.
;ccxml.telhw                com.optimtalk.tel_hw_sofia_sip

###############################################################################
# CCXML to VXML bridge parameters
###############################################################################
# Restart interpretation of the VoiceXML application if it was finished due to
# VoiceXML <exit> tag or due to implied exit. It will not be restarted if it
# was finished due to <disconnect> tag. (Professional Edition required)
;otccxml_to_otvxml_bridge.dialog_restart_on_exit

# Send the media stream outgoing from dialog to media sink specified by
# vxml.media.sink item instead of sending it to the joined endpoints.
;otccxml_to_otvxml_bridge.use_vxml_media_sink

# Take the incoming media stream for dialog from media source specified by
# vxml.media.source item instead of taking it from the joined endpoint.
;otccxml_to_otvxml_bridge.use_vxml_media_source

# Enable the item to transmit audio stream at real-time speed. Processing
# speed is normally given by media stream receivers. However, some receivers
# (typically simulator) process data in zero time. If this item is enabled
# the bridge inserts pauses to the streaming so that the data is streamed
# at real-time speed.
otccxml_to_otvxml_bridge.realtime

###############################################################################
# Telephony Hardware Simulator parameters
###############################################################################
# Delay (in seconds) inserted when processing the <createcall> tag
# before the connection.connected event is sent.
com.optimtalk.telhw_simulator.createcall_delay 2

# Conferencing component used
com.optimtalk.telhw_simulator.conference com.optimtalk.telhw_conference_simulator

###############################################################################
# Telephony hardware Sofia SIP parameters
###############################################################################
# This is a minimal port where rtp stream will be bound
com.optimtalk.telhw_sofia_sip.rtp_port.min           16000
# No rtp stream will be bound to port beyond this one
com.optimtalk.telhw_sofia_sip.rtp_port.max           16999
# Difference between maximal and minimal port should reflect expected number
# of calls. As there is always one port for rtp and one for rtcp you need
# twice as much ports reserved then your maximal call count is. Also some
# security reserve is always good

# Address where sip stack should bind itself.
# If you don't have more than one network interface (loopback excluded) then
# then you don't need to set this value. It will be guessed automatically
com.optimtalk.telhw_sofia_sip.bind_address           <local IP>

# Check if the bind address is one of the local addresses before it is provided
# to Sofia SIP
;com.optimtalk.telhw_sofia_sip.check_bind_address

# Port where sip stack should bind itself
com.optimtalk.telhw_sofia_sip.bind_port              5060

# Proxy settings

# Address of the proxy to use. If not set, the domain value is used instead
;com.optimtalk.telhw_sofia_sip.proxy.address              <proxy address>
;com.optimtalk.telhw_sofia_sip.proxy.port                 5060
# Proxy domain is the portion after @ in To: and From: headers. It is used
		# as a proxy address if not specified otherwise and if not specified at all
# the proxy address value is used
;com.optimtalk.telhw_sofia_sip.proxy.domain               <proxy domain>

# Enable this option if you want the sip stack to register with a proxy
;com.optimtalk.telhw_sofia_sip.register_with_proxy
;com.optimtalk.telhw_sofia_sip.proxy.username             <username>
;com.optimtalk.telhw_sofia_sip.proxy.password             <password>
# The ammount of time before the sip stack gives up on registering with proxy
com.optimtalk.telhw_sofia_sip.proxy.timeout              10000

# DTMF settings

# Incoming
# Sofia, unless specified otherwise, is configured to accept all forms of
# DTMF signaling (info, rfc2833, inband) [wishfull thinking right now :-)]
# If you uncomment any of .inbound you discard the support for the commented
# ones.
;com.optimtalk.telhw_sofia_sip.dtmf.inbound.info
;com.optimtalk.telhw_sofia_sip.dtmf.inbound.rfc2833
;com.optimtalk.telhw_sofia_sip.dtmf.inbound.inband

# Outgoing
# Choose how SIP stack should send it's DTMF tones. Only one choice at a time
# is supported
com.optimtalk.telhw_sofia_sip.dtmf.outbound.info
;com.optimtalk.telhw_sofia_sip.dtmf.outbound.rfc2833
;com.optimtalk.telhw_sofia_sip.dtmf.outbound.inband

# SIP message used for <reject>
# Specifies which SIP message will be used for <reject>
# Available values: 480 (Temporarily unavailable), 486 (Busy here),
# 487 (Request terminated).
# Default is 486.
; com.optimtalk.telhw_sofia_sip.reject_code     486

# Conferencing component used
com.optimtalk.telhw_sofia_sip.conference com.optimtalk.optimsys_conference


# disable using of ringing generator in sofia sip telephony hardaware
com.optimtalk.telhw_sofia_sip.do_not_use_ringing_generator

# Enable SIP headers processing and parameter hints in <createcall>, <accept>,
# <reject>, <redirect>, <merge> (not tested) and <disconnect>.
# Unknown SIP headers are converted and stored into event$.info.connection:
# if there is only one SIP header with that name scalar is created.
# if there is two or more SIP headers with this name, all SIP headers with this
#    name are stored into array.
# if SIP header does not have value, value of this SIP header is NULL.
#
# All items from hints.connection are stored as SIP header with this rules:
# if type of item is scalar, its value is used as value of SIP header.
# if type of item is null, its value is empty.
# if type of item is array, their values are processed according to this rules and their
#    name is name of item.
# other types of items is not supported.
com.optimtalk.telhw_sofia_sip.process_sip_headers

###############################################################################
# OptimSys Conference parameters
###############################################################################
# Size of buffer for incoming data (in packets)
;telhw.optimsys_conference.in_buffer_size          10

# Number of packets to prebuffer in the incoming stream
;telhw.optimsys_conference.in_prebuffer            3

###############################################################################
# CCXML Basic HTTP Event I/O Processor parameters
###############################################################################
# Access URI of the CCXML BasicHttp server
ccxml.basichttp_processor.accessuri http://127.0.0.1:9970

# BasicHttp server methods selection
# one of HTTP, HTTPS or both of them can be run
# choose one of HTTP, HTTPS, HTTP/HTTPS values
# default is HTTPS
ccxml.basichttp_processor.server_method HTTP

# Basichttp server path
# default value "/"
;ccxml.basichttp_processor.server_path /

# Basichttp server host
ccxml.basichttp_processor.http_host 127.0.0.1

# Basichttp server port
ccxml.basichttp_processor.http_port 9970

# Basichttp https server host
ccxml.basichttp_processor.https_host 127.0.0.1

# Basichttp https server port
ccxml.basichttp_processor.https_port 9980

# Basichttp https server private key file
ccxml.basichttp_processor.server_private_key httpserver.pem

# Basichttp https server CA file or directory
ccxml.basichttp_processor.server_ca_cert httpserver.pem

# Basichttp https servers client certificate verify mode
# these values are allowed [VERIFY_NONE,VERIFY_RELAXED,VERIFY_STRICT,VERIFY_ONCE]
#default will be use VERIFY_NONE
ccxml.basichttp_processor.server_verify_mode VERIFY_NONE

# All client config items are optional
# Basichttp https client certificate
;ccxml.basichttp_processor.client_sslcert

# Basichttp https client private key
;ccxml.basichttp_processor.client_sslkey

# Basichttp https client private key password
;ccxml.basichttp_processor.client_sslkeypasswd

# Basichttp https client ssl version [SSLv2,SSLv3,TLSv1,DEFAULT]
;ccxml.basichttp_processor.client_sslversion

# if present ssl client part will verify the server
;ccxml.basichttp_processor.client_verifypeer

# Basichttp access control list for server part (incoming events)
# If the ccxml.basichttp_processor.server_acl_file item is present the rules
# are read from the file.
# Otherwise if the ccxml.basichttp_processor.server_acl_rules is present it
# contains space-separated rules.
# If none of these items is present no ACL for server part is used.
;ccxml.basichttp_processor.server_acl_file basichhtp_server_acl.cfg
ccxml.basichttp_processor.server_acl_rules allow 127.0.0.1 deny all

# Basichttp access control list for client part (outgoing events)
# If the ccxml.basichttp_processor.client_acl_file item is present the rules
# are read from the file.
# Otherwise if the ccxml.basichttp_processor.client_acl_rules is present it
# contains space-separated rules.
# If none of these items is present no ACL for client part is used.
;ccxml.basichttp_processor.client_acl_file basichhtp_client_acl.cfg
ccxml.basichttp_processor.client_acl_rules allow 127.0.0.1 deny all

# Basichttp dispatch event IVariant parser
#(how deep can we go in parsing IVariant - preventing cycles)
;ccxml.basichttp_processor.variant_depth 16

###############################################################################
# CCXML Session Creation Processor parameters
###############################################################################
# Access URI of the CCXML Session Creation server
ccxml.session_creation.accessuri http://127.0.0.1:9970

# CCXML Session Creation server methods selection
# one of HTTP, HTTPS or both of them can be run
# choose one of HTTP, HTTPS, HTTP/HTTPS values
# default is HTTPS
ccxml.session_creation.method HTTP

# CCXML Session Creation server path
# default value "/"
ccxml.session_creation.path /createsession

# CCXML Session Creation server host
ccxml.session_creation.http_host 127.0.0.1

# CCXML Session Creation server port
ccxml.session_creation.http_port 9970

# CCXML Session Creation https server host
ccxml.session_creation.https_host 127.0.0.1

# CCXML Session Creation https server port
ccxml.session_creation.https_port 9980

# CCXML Session Creation https server private key file
ccxml.session_creation.private_key httpserver.pem

# CCXML Session Creation https server CA file or directory
ccxml.session_creation.ca_cert httpserver.pem

# CCXML Session Creation https servers client certificate verify mode
# these values are allowed [VERIFY_NONE,VERIFY_RELAXED,VERIFY_STRICT,VERIFY_ONCE]
#default will be use VERIFY_NONE
ccxml.session_creation.verify_mode VERIFY_NONE

# CCXML Session Creation access control list for server part (incoming events)
# If the ccxml.session_creation.acl_file item is present the rules
# are read from the file.
# Otherwise if the ccxml.session_creation.acl_rules is present it
# contains space-separated rules.
# If none of these items is present no ACL for server part is used.
;ccxml.session_creation.acl_file basichhtp_server_acl.cfg
ccxml.session_creation.acl_rules allow 127.0.0.1 deny all

###############################################################################
# ORTP related settings
###############################################################################
# Sender identification. All values are optional.

# Sender description CNAME in format user@host. Default is
#  optimtalk@unknown.server
;ortp.sdes.cname optimtalk@unknown.server

# Sender description NAME. This value should contain full name of user or 
#  organisation. Default OptimSys
;ortp.sdes.name OptimSys

# Sender description EMAIL. This value should contain vaild email. Default
#  support@optimsys.cz
;ortp.sdes.email support@optimsys.cz

# Sender description PHONE. Should contain valid phone number.
;ortp.sdes.phone <some num>

# Sender description LOC. Can contain any text representation of locality,
#  like city, address, building, office etc.
;ortp.sdes.locality <some locality>

# Sender description TOOL. Contains program description. Default is 
#  OptimTalk ORTP session
;ortp.sdes.identification OptimTalk ORTP session

# Sender description NOTE. Text note.
;ortp.sdes.note <some note>

##############################################################################
# Security configuration
##############################################################################
# Maximum number of events received by one CCXML session per minute
# If this limit is exceeded the session is terminated, error is logged and
# alarm is triggered
;optimtalk.security.ccxml.events_per_min_count 25000

# Maximum number of events sent by one CCXML session via basic http event
# processor. If this limit is exceeded error is logged.
# Allowed values are {(1..), unlimited}
;optimtalk.security.ccxml.sent_event_count 1000

# Maximum number of events received by one CCXML session via basic http event
# processor. If this limit is exceeded error is logged.
# Allowed values are {(1..), unlimited}
;optimtalk.security.ccxml.received_event_count 1000

# Prevents one CCXML session from sending ccxml.kill or ccxml.kill.unconditional
# event to another local CCXML session (with targettype='ccxml')
;ccxml.reject_local_ccxml_kill_event

# Rejects ccxml.kill and ccxml.kill.unconditional events received by event I/O
# processors other then ccxml (e.g. basichttp)
;ccxml.reject_external_ccxml_kill_event
